{
	"script": {
		"prefix": "<script",
		"body": [
			"<script runat=server language=\"JavaScript\" executioncontexttype=\"Post\" executioncontextname=test>",
			"\t",
			"</script>"
		],
		"description": "SSJS Block."
	},
	"Load": {
		"prefix": "Platform.Load",
		"body": [
			"Platform.Load(\"core\", \"1.1.1\");"
		],
		"description": "Load Core Library."
	},
	"try-catch": {
		"prefix": "try",
		"body": [
			"try {",
			"  ",
			"} catch (err) {",
			"  ",
			"}"
		],
		"description": "try catch"
	},
	"for-loop": {
		"prefix": "for",
		"body": [
			"for (var i = 0; i < ${1:iteration_length}; i++) {",
			"\t",
			"}"
		],
		"description": "For loop"
	},
	"Stringify": {
		"prefix": "Stringify",
		"body": [
			"Platform.Function.Stringify(${1:object})"
		],
		"description": "Stringify JSON"
	},
	"Parse JSON": {
		"prefix": "ParseJSON",
		"body": [
			"Platform.Function.ParseJSON(${1:json})"
		],
		"description": "Parse JSON"
	},
	"GUID": {
		"prefix": "GUID",
		"body": [
			"Platform.Function.GUID()"
		],
		"description": "Returns a random GUID value for use as a unique identifier."
	},
	"GetValue": {
		"prefix": "GetValue",
		"body": [
			"Platform.Variable.GetValue(${1:ampscriptVariableName})"
		],
		"description": "Get value from of AMPscript variable (use '@')."
	},
	"SetValue": {
		"prefix": "SetValue",
		"body": [
			"Platform.Variable.SetValue(${1:ampscriptVariableName}, ${2:variableValue});"
		],
		"description": "Set value for AMPscript variable in the current script context."
	},
	"Attribute.GetValue": {
		"prefix": "Attribute",
		"body": [
			"Attribute.GetValue(${1:attributeName});"
		],
		"description": "Get value from of an Attribute (string)."
	},
	"HttpRequest": {
		"prefix": "HttpRequest",
		"body": [
			"var req = new Script.Util.HttpRequest(${1:url});",
			"req.emptyContentHandling = 0;",
			"req.retries = 2;",
			"req.continueOnError = true;",
			"req.setHeader(${2:headerName}, ${3:headerValue});",
			"req.method = '${4:HttpMethod}';",
			"req.postData = ${5:postData};",
			"",
			"var resp = req.send();",
			"",
			"resp.content + ''",
			"resp.statusCode"
		],
		"description": "Run any HTTP Request including error handling."
	},
	"Base64Decode": {
		"prefix": "Base64Decode",
		"body": [
			"Base64Decode(1:encoded)"
		],
		"description": "Decode a base64 encoded string."
	},
	"Base64Encode": {
		"prefix": "Base64Encode",
		"body": [
			"Base64Encode(${1:string})"
		],
		"description": "Encode a string to base64."
	},
	"Write": {
		"prefix": "Write",
		"body": [
			"Write(${1:content})"
		],
		"description": "Write content to the page."
	},

	"Request.Browser": {
		"prefix": "Request.Browser",
		"body": [
			"Platform.Request.Browser()"
		],
		"description": "Get the User Agent of the current request."
	},
	"Request.ClientIP": {
		"prefix": "Request.ClientIP",
		"body": [
			"Platform.Request.ClientIP()"
		],
		"description": "Get the IP Address of the client making the request."
	},
	"Request.HasSSL": {
		"prefix": "Request.HasSSL",
		"body": [
			"Platform.Request.HasSSL() + ''"
		],
		"description": "Check if the current request could support SSL (even if not currently using SSL)."
	},
	"Request.IsSSL": {
		"prefix": "Request.IsSSL",
		"body": [
			"Platform.Request.IsSSL() + ''"
		],
		"description": "Check if the current request is using SSL."
	},
	"Request.Method": {
		"prefix": "Request.Method",
		"body": [
			"Platform.Request.Method() + ''"
		],
		"description": "Get the HTTP Method of the current request."
	},
	"Request.QueryString": {
		"prefix": "Request.QueryString",
		"body": [
			"Platform.Request.QueryString()"
		],
		"description": "Returns the full query string for the Request object as a string value."
	},
	"Request.ReferrerURL": {
		"prefix": "Request.ReferrerURL",
		"body": [
			"Platform.Request.ReferrerURL()"
		],
		"description": "Returns the URL of the referring web address in a web context in a string value."
	},
	"Request.RequestURL": {
		"prefix": "Request.RequestURL",
		"body": [
			"Platform.Request.RequestURL()"
		],
		"description": "Returns the full URL of the Request object as a string value."
	},
	"Request.UserAgent": {
		"prefix": "Request.UserAgent",
		"body": [
			"Platform.Request.UserAgent()"
		],
		"description": "Returns the name of the browser associated with the Request object as a string value."
	},

	"Request.GetCookieValue": {
		"prefix": "Request.GetCookieValue",
		"body": [
			"Platform.Request.GetCookieValue(${1:cookieName})"
		],
		"description": "Returns the value of a cookie from the Request object as a string value."
	},
	"Request.GetFormField": {
		"prefix": "Request.GetFormField",
		"body": [
			"Platform.Request.GetFormField(${1:formFieldName})"
		],
		"description": "Retrieves information from specified form fields, such as data included in POST requests."
	},
	"Request.GetPostData": {
		"prefix": "Request.GetPostData",
		"body": [
			"Platform.Request.GetPostData(${1:encodingFormat})"
		],
		"description": "Returns the data from the POST request as a string value, with an optional encoding format (e.g. 'utf-8')."
	},
	"Request.GetQueryStringParameter": {
		"prefix": "Request.GetQueryStringParameter",
		"body": [
			"Platform.Request.GetQueryStringParameter(${1:parameterName})"
		],
		"description": "Retrieves information from specified query string parameters, such as data included in GET requests."
	},
	"Request.GetRequestHeader": {
		"prefix": "Request.GetRequestHeader",
		"body": [
			"Platform.Request.GetRequestHeader(${1:headerName})"
		],
		"description": "Returns the value of a specified header from the Request object as a string. Work in Landing Pages only."
	},
	"Request.GetUserLanguages": {
		"prefix": "Request.GetUserLanguages",
		"body": [
			"Platform.Request.GetUserLanguages()"
		],
		"description": "Returns an array of locale codes (strings) associated with a user browser (Landing Pages only)."
	},

	"DeleteData": {
		"prefix": "DeleteData",
		"body": [
			"Platform.Function.DeleteData(${1:dataExtensionName}, ${2:filterColumnsArray}, ${3:filterValuesArray})"
		],
		"description": "Delete data from a data extensions in non-sending contexts. Returns number of rows deleted."
	},
	"DeleteDE": {
		"prefix": "DeleteDE",
		"body": [
			"Platform.Function.DeleteDE(${1:dataExtensionName}, ${2:filterColumnsArray}, ${3:filterValuesArray})"
		],
		"description": "Delete data from a data extensions in sendable contexts. Returns number of rows deleted."
	},
	"InsertData": {
		"prefix": "InsertData",
		"body": [
			"Platform.Function.InsertData(${1:dataExtensionName}, ${2:columnsArray}, ${3:valuesArray})"
		],
		"description": "Insert data into a data extension in non-sending contexts and SMS messages. Returns number of rows inserted."
	},
	"InsertDE": {
		"prefix": "InsertDE",
		"body": [
			"Platform.Function.InsertDE(${1:dataExtensionName}, ${2:columnsArray}, ${3:valuesArray})"
		],
		"description": "Insert data into a data extension in sendable contexts. Returns number of rows inserted."
	},
	"Lookup": {
		"prefix": "Lookup",
		"body": [
			"Platform.Function.Lookup(${1:dataExtensionName}, ${2:targetColumnToRetrieve}, ${3:lookupColumnStringOrArray}, ${4:lookupValueStringOrArray})"
		],
		"description": "Lookup a single value from a data extension as a string."
	},
	"LookupOrderedRows": {
		"prefix": "LookupOrderedRows",
		"body": [
			"Platform.Function.LookupOrderedRows(${1:dataExtensionName}, ${2:numberOfRowsToReturn}, ${3:sortingColumn_ASC_DESC}, ${4:lookupColumnStringOrArray}, ${5:lookupValueStringOrArray})"
		],
		"description": "Lookup multiple rows (array) from a data extension and orders them based on column value."
	},
	"LookupRows": {
		"prefix": "LookupRows",
		"body": [
			"Platform.Function.LookupRows(${1:dataExtensionName}, ${2:lookupColumnStringOrArray}, ${3:lookupValueStringOrArray})"
		],
		"description": "Lookup multiple rows (as array) from a data extension."
	},
	"UpdateData": {
		"prefix": "UpdateData",
		"body": [
			"Platform.Function.UpdateData(${1:dataExtensionName}, ${2:filterColumnsArray}, ${3:filterValuesArray}, ${4:columnsToUpdateArray}, ${5:valuesToUpateArray})"
		],
		"description": "Update data in a data extension in non-sending contexts. Returns number of rows updated."
	},
	"UpdateDE": {
		"prefix": "UpdateDE",
		"body": [
			"Platform.Function.UpdateDE(${1:dataExtensionName}, ${2:filterColumnsArray}, ${3:filterValuesArray}, ${4:columnsToUpdateArray}, ${5:valuesToUpateArray})"
		],
		"description": "Update data in a data extension in sendable contexts. Returns number of rows updated."
	},
	"UpsertData": {
		"prefix": "UpsertData",
		"body": [
			"Platform.Function.UpsertData(${1:dataExtensionName}, ${2:filterColumnsArray}, ${3:filterValuesArray}, ${4:columnsToUpdateArray}, ${5:valuesToUpateArray})"
		],
		"description": "Upsert data into a data extension in non-sending contexts. Returns number of rows upserted."
	},
	"UpsertDE": {
		"prefix": "UpsertDE",
		"body": [
			"Platform.Function.UpsertDE(${1:dataExtensionName}, ${2:filterColumnsArray}, ${3:filterValuesArray}, ${4:columnsToUpdateArray}, ${5:valuesToUpateArray})"
		],
		"description": "Upsert data into a data extension in sendable contexts. Returns number of rows upserted."
	},

	"BeginImpressionRegion": {
		"prefix": "BeginImpressionRegion",
		"body": [
			"Platform.Function.BeginImpressionRegion(${1:regionName})"
		],
		"description": "Begin an impression region within the supplied content. You can use the impression region to identify specific areas of content for analytical purposes."
	},
	"ContentArea": {
		"prefix": "ContentArea",
		"body": [
			"Platform.Function.ContentArea(${1:contentAreaId}, ${2:impressioRegionOptional}, ${3:throwExceptionOnFailOptional}, ${4:defaultContentOptional})"
		],
		"description": "Returns the content of a Content Area."
	},
	"ContentAreaByName": {
		"prefix": "ContentAreaByName",
		"body": [
			"Platform.Function.ContentAreaByName(${1:contentAreaName}, ${2:impressioRegionOptional}, ${3:throwExceptionOnFailOptional}, ${4:defaultContentOptional})"
		],
		"description": "Returns content from a content area specified by Name."
	},
	"ContentBlockByID": {
		"prefix": "ContentBlockByID",
		"body": [
			"Platform.Function.ContentBlockByID(${1:contentBlockId}, ${2:impressioRegionOptional}, ${3:throwExceptionOnFailOptional}, ${4:defaultContentOptional})"
		],
		"description": "Returns the content of a Content Block by ID."
	},
	"ContentBlockByKey": {
		"prefix": "ContentBlockByKey",
		"body": [
			"Platform.Function.ContentBlockByKey(${1:contentBlockKey}, ${2:impressioRegionOptional}, ${3:throwExceptionOnFailOptional}, ${4:defaultContentOptional})"
		],
		"description": "Returns the content of a Content Block by Key."
	},
	"ContentBlockByName": {
		"prefix": "ContentBlockByName",
		"body": [
			"Platform.Function.ContentBlockByName(${1:contentBlockName}, ${2:impressioRegionOptional}, ${3:throwExceptionOnFailOptional}, ${4:defaultContentOptional})"
		],
		"description": "Returns the content of a Content Block by Name."
	},
	"ContentImagebyID": {
		"prefix": "ContentImagebyID",
		"body": [
			"Platform.Function.ContentImagebyID(${1:contentImageId}, ${2:defaultContentOptional})"
		],
		"description": "Returns the content of an Image Content Block by ID."
	},
	"ContentImagebyKey": {
		"prefix": "ContentImagebyKey",
		"body": [
			"Platform.Function.ContentImagebyKey(${1:contentImageKey}, ${2:defaultContentOptional})"
		],
		"description": "Returns the content of an Image Content Block by Key."
	},
	"EndImpressionRegion": {
		"prefix": "EndImpressionRegion",
		"body": [
			"Platform.Function.EndImpressionRegion(${1:trueToCloseAllRegionsFalseToCloseLast})"
		],
		"description": "End an impression region within the supplied content. Used with `BeginImpressionRegion`."
	},
	"TreatAsContent": {
		"prefix": "TreatAsContent",
		"body": [
			"Platform.Function.TreatAsContent(${1:content})"
		],
		"description": "Takes a supplied string value and treat it as a content area. This function renders all included dynamic content, scripts, and personalization strings. Use the HTTPGETWRAP command to wrap links for tracking and analytics within this function."
	},

	"HTTPGet": {
		"prefix": "HTTPGet",
		"body": [
			"var status = [0];",
			"var result = Platform.Function.HTTPGet(${1:url}, ${2:continueOnErrorOptional}, ${3:continueWithEmptyContentNumberOptional|0,1|}, ${4:headerNamesArrayOptional}, ${5:headerValuesArrayOptional}, ${6:statusArrayOptional});",
			"if (status[0] == 0) { Write('Requst OK') }"
		],
		"description": "Retrieves information from the specified URL via a GET request. The timeout value for this function is 30 seconds. Status: 0: OK, -1: missing URL, -2: HTTP error, -3: request OK but without content."
	},
	"HTTPPost": {
		"prefix": "HTTPPost",
		"body": [
			"var content = [0];",
			"var statusCode = Platform.Function.HTTPPost(${1:url}, ${2:contentType}, ${3:body}, ${4:headerNamesArrayOptional}, ${5:headerValuesArrayOptional}, ${6:contentArray});",
			"if (statusCode == 200) { Write(content[0]) }"
		],
		"description": "Posts content to the specified URL. Use standard ports if needed (80 for HTTP, 443 for HTTPS). Default character set is WindowsCodePage 1252. The timeout value for this function is 30 seconds."
	}
}